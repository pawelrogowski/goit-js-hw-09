{"mappings":"gfAYA,IAEAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAEpCC,YAAW,IAAMJ,EAAQ,C,SAAEH,E,MAAUC,KAAUA,GAE/CM,YAAW,IAAMH,EAAO,C,SAAEJ,E,MAAUC,KAAUA,EAAA,GAGpD,CACA,MAAMO,EAAcC,SAASC,cAAc,SACrCC,EAAeH,EAAYE,cAAc,yBAC/CF,EAAYI,iBAAiB,UAAUC,IACrCA,EAAMC,iBACNH,EAAaI,UAAW,EACxB,MAAMC,EAAaC,OAAOT,EAAYP,MAAMiB,OACtCC,EAAYF,OAAOT,EAAYY,KAAKF,OACpCG,EAASJ,OAAOT,EAAYa,OAAOH,OACzC,IAAK,IAAII,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAG/BvB,EAFiBuB,EAAI,EACPN,EAAaG,EAAYG,GAEpCC,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA2B,OAAOC,QAAQ,uBAAuBzB,QAAeC,MAAS,IAE/DyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA2B,OAAOG,QAAQ,sBAAsB3B,QAAeC,MAAS,GAEnE,CACAU,EAAaI,UAAW,CAAK,G","sources":["src/js/03-promises.js"],"sourcesContent":["/*\nThis script does the following:\n- Declares a function that creates a new Promise object with a specified delay and position.\n- When the form is submitted:\n  - Prevents the default form submission behavior.\n  - Gets the values of the 'delay', 'step', and 'amount' input fields.\n  - Loops through the specified number of times.\n  - For each iteration:\n    - Calculates the current position and delay.\n    - Calls the createPromise function and passes in the current position and delay.\n    - If the Promise is resolved, shows a success notification.\n    - If the Promise is rejected, shows a failure notification.\n*/\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      setTimeout(() => resolve({ position, delay }), delay);\n    } else {\n      setTimeout(() => reject({ position, delay }), delay);\n    }\n  });\n}\nconst formElement = document.querySelector('.form');\nconst submitButton = formElement.querySelector('button[type=\"submit\"]');\nformElement.addEventListener('submit', event => {\n  event.preventDefault();\n  submitButton.disabled = true;\n  const firstDelay = Number(formElement.delay.value);\n  const delayStep = Number(formElement.step.value);\n  const amount = Number(formElement.amount.value);\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const delay = firstDelay + delayStep * i;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  submitButton.disabled = false;\n});\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","Math","random","setTimeout","$ce04d3a99e08e73b$var$formElement","document","querySelector","$ce04d3a99e08e73b$var$submitButton","addEventListener","event","preventDefault","disabled","firstDelay","Number","value","delayStep","step","amount","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.63a52c87.js.map"}